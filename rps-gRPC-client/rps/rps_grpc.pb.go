// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: rps.proto

package rps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPS_PlayGame_FullMethodName = "/rps.RPS/PlayGame"
)

// RPSClient is the client API for RPS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPSClient interface {
	PlayGame(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*GameResult, error)
}

type rPSClient struct {
	cc grpc.ClientConnInterface
}

func NewRPSClient(cc grpc.ClientConnInterface) RPSClient {
	return &rPSClient{cc}
}

func (c *rPSClient) PlayGame(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*GameResult, error) {
	out := new(GameResult)
	err := c.cc.Invoke(ctx, RPS_PlayGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPSServer is the server API for RPS service.
// All implementations must embed UnimplementedRPSServer
// for forward compatibility
type RPSServer interface {
	PlayGame(context.Context, *MoveRequest) (*GameResult, error)
	mustEmbedUnimplementedRPSServer()
}

// UnimplementedRPSServer must be embedded to have forward compatible implementations.
type UnimplementedRPSServer struct {
}

func (UnimplementedRPSServer) PlayGame(context.Context, *MoveRequest) (*GameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedRPSServer) mustEmbedUnimplementedRPSServer() {}

// UnsafeRPSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPSServer will
// result in compilation errors.
type UnsafeRPSServer interface {
	mustEmbedUnimplementedRPSServer()
}

func RegisterRPSServer(s grpc.ServiceRegistrar, srv RPSServer) {
	s.RegisterService(&RPS_ServiceDesc, srv)
}

func _RPS_PlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPSServer).PlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPS_PlayGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPSServer).PlayGame(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPS_ServiceDesc is the grpc.ServiceDesc for RPS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rps.RPS",
	HandlerType: (*RPSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayGame",
			Handler:    _RPS_PlayGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rps.proto",
}
